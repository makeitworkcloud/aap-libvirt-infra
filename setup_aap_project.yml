#!/usr/bin/env ansible-playbook
# File: setup_aap_project.yml
# GitHub: https://github.com/makeitworkcloud/aap-libvirt-infra
# Description: This playbook creates the libvirt-infra project in Ansible Automation Platform (AAP).
# Author:
#                                   _|
#   _|    _|  _|_|_|      _|_|    _|_|_|_|    _|_|
#     _|_|    _|    _|  _|    _|    _|      _|    _|
#   _|    _|  _|    _|  _|    _|    _|      _|    _|
#   _|    _|  _|    _|    _|_|        _|_|    _|_|
---
- name: Load SOPS values
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Load vars task
      community.sops.load_vars:
        file: secrets/secrets.yaml

- name: Deploy AAP content via API
  hosts: localhost
  tasks:
    - name: Create libvirt project
      ansible.builtin.uri:
        url: "https://{{ hostvars['localhost']['controller_host'] }}/api/controller/v2/projects/"
        method: POST
        user: "{{ hostvars['localhost']['controller_username'] }}"
        password: "{{ hostvars['localhost']['controller_password'] }}"
        force_basic_auth: true
        body_format: json
        body:
          name: "libvirt-infra"
          description: "Created via URI module"
          scm_type: "git"
          scm_url: "https://github.com/makeitworkcloud/aap-libvirt-infra.git"
          organization: 1
        status_code:
          - 201
          - 400
      register: project_result

    - name: Get project if POST failed
      ansible.builtin.uri:
        url: "https://{{ hostvars['localhost']['controller_host'] }}/api/controller/v2/projects/?name=libvirt-infra&organization=1"
        method: GET
        user: "{{ hostvars['localhost']['controller_username'] }}"
        password: "{{ hostvars['localhost']['controller_password'] }}"
        force_basic_auth: true
        status_code: 200
      register: project_get
      when: project_result.status == 400

    - name: Trigger Project Sync (Update)
      ansible.builtin.uri:
        url: "{{ 'https://' ~ hostvars['localhost']['controller_host'] ~ '/api/controller/v1/projects/'
          ~ (project_result.json.id | default(project_get.json.results[-1].id)) ~ '/update/' }}"
        method: POST
        user: "{{ hostvars['localhost']['controller_username'] }}"
        password: "{{ hostvars['localhost']['controller_password'] }}"
        force_basic_auth: true
        body_format: json
        headers:
          Content-Type: "application/json"
        status_code: 201
        return_content: true
      register: sync_result

    - name: Create Inventory
      ansible.builtin.uri:
        url: "https://{{ hostvars['localhost']['controller_host'] }}/api/controller/v2/inventories/"
        method: POST
        user: "{{ hostvars['localhost']['controller_username'] }}"
        password: "{{ hostvars['localhost']['controller_password'] }}"
        force_basic_auth: true
        body_format: json
        body:
          name: "libvirt-infra"
          description: "Created via REST API"
          organization: "1"
        status_code:
          - 201
          - 400
      register: inventory_result

    - name: Get inventory if POST failed
      ansible.builtin.uri:
        url: "https://{{ hostvars['localhost']['controller_host'] }}/api/controller/v2/inventories/?name=libvirt-infra&organization=1"
        method: GET
        user: "{{ hostvars['localhost']['controller_username'] }}"
        password: "{{ hostvars['localhost']['controller_password'] }}"
        force_basic_auth: true
        status_code: 200
      register: inventory_get
      when: inventory_result.status == 400

    - name: Add host to inventory
      ansible.builtin.uri:
        url: "https://{{ hostvars['localhost']['controller_host'] }}/api/controller/v2/hosts/"
        method: POST
        user: "{{ hostvars['localhost']['controller_username'] }}"
        password: "{{ hostvars['localhost']['controller_password'] }}"
        force_basic_auth: true
        body_format: json
        body:
          name: "{{ hostvars['localhost']['libvirt_host'] }}"
          inventory: "{{ inventory_result.json.id | default }}"
          variables: |
            ansible_host: {{ hostvars['localhost']['libvirt_fqdn'] }}
        status_code:
          - 201
          - 400
        validate_certs: false
      register: host_result

    - name: Create Machine Credential (SSH key) in AAP
      ansible.builtin.uri:
        url: "https://{{ hostvars['localhost']['controller_host'] }}/api/controller/v2/credentials/"
        method: POST
        user: "{{ hostvars['localhost']['controller_username'] }}"
        password: "{{ hostvars['localhost']['controller_password'] }}"
        force_basic_auth: true
        body_format: json
        body:
          name: "libvirt-infra SSH"
          description: "https://github.com/makeitworkcloud/aap-libvirt-infra/"
          credential_type: "1"
          organization: "1"
          inputs:
            username: "{{ hostvars['localhost']['libvirt_ssh_user'] }}"
            ssh_key_data: "{{ hostvars['localhost']['libvirt_ssh_private_key'] }}"
        status_code:
          - 201
          - 400
        validate_certs: false
      register: cred_result

    - name: Get machine credential if POST failed
      ansible.builtin.uri:
        url: "https://{{ hostvars['localhost']['controller_host'] }}/api/controller/v2/credentials/?name=libvirt-infra%20SSH&organization=1&credential_type=1"
        method: GET
        user: "{{ hostvars['localhost']['controller_username'] }}"
        password: "{{ hostvars['localhost']['controller_password'] }}"
        force_basic_auth: true
        status_code: 200
      register: cred_get
      when: cred_result.status == 400

    - name: Create Vault Credential in AAP
      ansible.builtin.uri:
        url: "https://{{ hostvars['localhost']['controller_host'] }}/api/controller/v2/credentials/"
        method: POST
        user: "{{ hostvars['localhost']['controller_username'] }}"
        password: "{{ hostvars['localhost']['controller_password'] }}"
        force_basic_auth: true
        body_format: json
        body:
          name: "libvirt-infra Vault"
          description: "Credential for unlocking Ansible Vault files"
          credential_type: "3"
          organization: "1"
          inputs:
            vault_password: "{{ hostvars['localhost']['vault_password'] }}"
        status_code:
          - 201
          - 400
        validate_certs: false
      register: vault_cred_result

    - name: Get vault credential if POST failed
      ansible.builtin.uri:
        url: "https://{{ hostvars['localhost']['controller_host'] }}/api/controller/v2/credentials/?name=libvirt-infra%20Vault&organization=1&credential_type=3"
        method: GET
        user: "{{ hostvars['localhost']['controller_username'] }}"
        password: "{{ hostvars['localhost']['controller_password'] }}"
        force_basic_auth: true
        status_code: 200
      register: vault_cred_get
      when: vault_cred_result.status == 400

    - name: Display results
      ansible.builtin.debug:
        var: vault_cred_get

    - name: Find all files in playbooks/ directory
      ansible.builtin.find:
        paths: ./playbooks/
        file_type: file
        recurse: false
      register: found_playbooks

    - name: Create job templates for each playbook
      ansible.builtin.uri:
        url: "https://{{ hostvars['localhost']['controller_host'] }}/api/controller/v2/job_templates/"
        method: POST
        user: "{{ hostvars['localhost']['controller_username'] }}"
        password: "{{ hostvars['localhost']['controller_password'] }}"
        force_basic_auth: true
        body_format: json
        body:
          name: "{{ item.path | basename | regex_replace('\\.yml$', '') }}"
          description: "Job template for {{ item.path | basename }}"
          job_type: "run"
          inventory: "{{ inventory_result.json.id | default(inventory_get.json.results[0].id) }}"
          project: "{{ project_result.json.id | default(project_get.json.results[0].id) }}"
          playbook: "playbooks/{{ item.path | basename }}"
          organization: "1"
          credentials:
            - "{{ cred_result.json.id | default(cred_get.json.results[0].id) }}"
            - "{{ vault_cred_result.json.id | default(vault_cred_get.json.results[0].id) }}"
        status_code:
          - 201
          - 400
      loop: "{{ found_playbooks.files }}"
      register: job_template_results
